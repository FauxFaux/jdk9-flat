main.usage.summary=\
Usage: {0} <options> <classes...>\n\
use -h, -? or --help for a list of possible options

main.usage=\
Usage: {0} <options> <classes...>\n\
where <classes> can be a pathname to a .class file, a directory, a JAR file,\n\
or a fully-qualified classname or wildcard "*".  Possible options include:

error.prefix=Error:
warn.prefix=Warning:

main.opt.h=\
\  -h -?      --help                    Print this usage message

main.opt.version=\
\             --version                 Version information

main.opt.V=\
\  -V <level> --verbose-level=<level>   Print package-level or class-level dependencies\n\
\                                       Valid levels are: "package" and "class"

main.opt.v=\
\  -v         --verbose                 Print additional information

main.opt.s=\
\  -s         --summary                 Print dependency summary only

main.opt.p=\
\  -p <pkg name> --package=<pkg name>   Restrict analysis to classes in this package\n\
\                                       (may be given multiple times)

main.opt.e=\
\  -e <regex> --regex=<regex>           Restrict analysis to packages matching pattern\n\
\                                       (-p and -e are exclusive)

main.opt.P=\
\  -P         --profile                 Show profile or the file containing a package

main.opt.c=\
\  -c <path>  --classpath=<path>        Specify where to find class files

main.opt.R=\
\  -R         --recursive               Recursively traverse all dependencies

main.opt.d=\
\  -d <depth> --depth=<depth>           Specify the depth of the transitive dependency analysis

err.unknown.option=unknown option: {0}
err.missing.arg=no value given for {0}
err.internal.error=internal error: {0} {1} {2}
err.invalid.arg.for.option=invalid argument for option: {0}
err.option.after.class=option must be specified before classes: {0}
err.option.unsupported={0} not supported: {1}
err.profiles.msg=No profile information
warn.invalid.arg=Invalid classname or pathname not exist: {0}
warn.split.package=package {0} defined in {1} {2}

artifact.not.found=not found
